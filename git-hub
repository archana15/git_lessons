GIT 
    keeos track of the changes 
    aka : verison control system

History -  versions that date back git hub 

    1. source code control system - SCCS
        -free with unix
    
    2. revision control system - RCS 
        -changes versions were stores as snapshots 

    Drawbacks of SCCS and RCS :
        -can track changes in a single file at a time 
        i.e, no multiple users and no concurrency 

    3. concurrent version system  - CVS 
        -multi-user repositories 
        i.e, can make changes concurrently 
    
    4. apache subversion - SVN
        - faster than CVS
        - can track text + images
        - can watch files and Directories 
            * it can track the changes made in the file even if the name of the file is changed 
        
    5. Bitkeeper - SCM
        - distributed version control 
        - community verion : owned by a private company 
        - initially free, so linux started using it but later wasn't free 
        therefore linus thorvalds developed GIT-hub
    
    6. GIT
        - it is a distributed version control system 
        - faster
        - safer
        - free
        - Linus thorvalds
        

DISTRIBUTED VERSION CONTROL SYSTEM :

    previous systems :
        they had a central repository and they would store any changes in it, 
        it was up to the user to pull down the changes 

    GIT
    - impotant feature of GIT 
    - different users can maintain their own repositories instead of having one single central repository
    - changes are stored in sets/patches
    - helps us trace the changes instead of the versions of the documents
    - changed sets are discreate units
    - changed sets can be exchanged between the repositories

    eg:
        document : doc
        changed sets : A, B, C, D, E, F 

        repository1 : A B C D E F
        repository2 : A B C D
        repository3 : A B C E 
        repository4 : A B E F 

        here, no repository is the main one, we can add a new set G into repository3 and share it in repository4
        w/o having to go to a central repository

        in CVS:
            we had to upload a changed set to a central server and then other users had to pull down the changes
            to update the version of theri files 

    "master repository" in git - just convention,
                                to tell everyone to submit their chsnges to this repository 

    - we could have multiple repository and each of them could have different versions of a file, 
    we could all contribute to them. 
    
    - all repositories are considered equal in GIT 

    Advantage of the above :
    - no need to communicate with the central server 
    - therefore, faster
    - no need to have network access to submit changes 
    - no single point failure : if something happens to the central repository works can still be done 
    - encourages participation and forking of projects
    eg, in an open source project if you don't like something you can have your own version and start working independently 
    - developers can work independently 
    - one can submit changes for inclusion or rejection 
    
    
1. installation :
    2 ways : 
        1. GIT installer : 
            go to https//git-scm.com (scm -> source code manager) 

        2. Homebrew :
            brew install git
    GIT : software 
    GIT-hub : is a website
 
2. confuguration :     
    -git config --name "archana kalburgi"
    -git congig --email "archanakablurgi@gmail.com"
    -man git help  
    - to get tab key to complete a word
    - to add editor :
        git config --global core.editor "vim"

3. initialize a git repository 
    - git init (init -> initialize) 
    
    where git stores files that it uses for it's project :
        - create a folder in Documents -> "first_git_project"
        - cd to the folder and initialize it 
        - initializing the folder by
        Archanas-MacBook-Air:first_git_project archana$ git init
        Initialized empty Git repository in /Users/archana/Documents/first_git_project/.git/
     
        - after initializing the folder it creates a .git directory inside that folder 
        Archanas-MacBook-Air:first_git_project archana$ ls -la
        total 0
        drwxr-xr-x   3 archana  staff   96 Apr  5 14:08 .
        drwx------+  9 archana  staff  288 Apr  5 14:06 ..
        drwxr-xr-x  10 archana  staff  320 Apr  5 14:08 .git

        - .git will be invisible because it's a dot(.) file but it is there, it is a HIDDEN FILE
        - . :current directory 
        - .. : parent directory 

        - taking a look inside .git 
        Archanas-MacBook-Air:first_git_project archana$ ls -la .git
        total 24
        8 -rw-r--r--   1 archana  staff   23 Apr  5 14:08 HEAD
        0 drwxr-xr-x   2 archana  staff   64 Apr  5 14:08 branches
        8 -rw-r--r--   1 archana  staff  137 Apr  5 14:08 config
        8 -rw-r--r--   1 archana  staff   73 Apr  5 14:08 description
        0 drwxr-xr-x  13 archana  staff  416 Apr  5 14:08 hooks
        0 drwxr-xr-x   3 archana  staff   96 Apr  5 14:08 info
        0 drwxr-xr-x   4 archana  staff  128 Apr  5 14:08 objects
        0 drwxr-xr-x   4 archana  staff  128 Apr  5 14:08 refs

        - these are the various files and directories inside of it, git uses these for tracking  
        eg : branches keeps the track of all the branches that we create 

        - to see what's in config file : 
        Archanas-MacBook-Air:first_git_project archana$ cat .git/config
        [core]
            repositoryformatversion = 0
            filemode = true
            bare = false
            logallrefupdates = true
            ignorecase = true
            precomposeunicode = true

        - if this .git directory is removed then there will be no tracking of the project
        this kees track of the folder 
        in SVN, in every file tracker is put if we want the directory to not to be tracked we have to delete it from all folder 

        - .git contains everything that git knows erasing it will remove everthing git knows


4. making the first commit :
    1. adding a file :

        git add .
        - . is the sort cut for the current directory 
        - git, add all the changes in the current directory 
        - it just add it's not tracking those changes, not made it permanent  
        - in order to track them, we need to commit them 

        git commit -m "<add_your_message>"
        - -m : message 
        - tis will commit and track all the message forever 
        Archanas-MacBook-Air:first_git_project archana$ git commit -m "Initial commit"
        [master (root-commit) 29f6b20] Initial commit
        1 file changed, 1 insertion(+)
        create mode 100644 first_file.txt

    steps :
        1. make changes
        2. add the changes 
        3. commit the changes to a repository with a message 

5. writing commit message :
    - initial single line followed by a short summary 
    - this should contain a short summary of what the changes are 
    - keep each line<72 words, other's will be viewing in different devices
    - use present tense not past tense because the commit msg is a label to what is inside 
    eg :
        incorrect msg:
            I fixed a bug
        correct msg :
            this fixes a bug 
    - bullet point : asteriks or hyphens or tracking number 

6. view the commit log : 
    "how to view the commits that have been made to the git projects"
    
    git log 
    Archanas-MacBook-Air:first_git_project archana$ git log 
    commit 29f6b20b28bb9acbf140c26c6ba68694b5153a9c (HEAD -> master)
    Author: Archana Kalburgi <archanakalburgi@gmail.com>
    Date:   Sun Apr 5 16:06:13 2020 +0530

        Initial commit

    29f6b20b28bb9acbf140c26c6ba68694b5153a9c -> unique commit ID 

    git help log 
    - enlists all the options available with log 
    eg:
    1. git log -n 5 
    - this will show the 5 most recent commits made 
    
    2. git log --since=2019-01-01 or git log --until=2010-01-01
    - will show all the commits that have made since 01-01-2019 

    3. git log --author="Archana"
    - shows commits made by Archana

    4. git log --grep="Init" 
    - grep - globally search for reqular expresion.
    - finds any commit with the help of message 
    - this will find a commit with message that has "Init" string in it 

    Archanas-MacBook-Air:first_git_project archana$ git log --grep="Init" 
    commit 29f6b20b28bb9acbf140c26c6ba68694b5153a9c (HEAD -> master)
    Author: Archana Kalburgi <archanakalburgi@gmail.com>
    Date:   Sun Apr 5 16:06:13 2020 +0530

        Initial commit

KEY CONCEPTS OF GIT :

1. THE THREE TREES ARCHITECTURE :
    - when we have to move out the copies from one repository to a working repository -> "we check out the copies"
    - sfter making changes we commit those changes back to the repository 
    
    - usually :
    there is two stage architecture : 
            repository
            working 
        
        process:
            working 
                commit 
            repository 
        we have check out the copies of newly commited copies we have to be updated with the newest versions 
    
    - in GIT hub :
            repository
            staging index
            working

        two step process to commit changes 
            working 
                add
            staging index 
                commit 
            repository 
        
        we add out changes to staging index and then commited it to the repository 
        we can also directly commit the changes to the repository 

        but with this architecture we can make changes to 10 differet files in the working copy 
        and then can selectively commit 5 of the changes as one set  
        that's why it's called staging 

        same with checking out changes :
        pull from repository to staging index and then to working directory 

2. WORKFLOW OF THREE TREE ARCHITECTURE:

    repository 

    stagging index
          ^
          |
     git add file.txt

    working -> (file.txt - changed set A)


    repository 
        ^
        |
      git commit 
 
    stagging index -> (file.txt - changed set A)

    working 

HOW GIT LABELS AND REFERS TI ITS COMMITS USING HASH VALUES :
    - git generates a checksum to each of the changes (A,B,C etc)
    - checksum -> hashvalue 
    - checksum :
        - a number created by taking in data & feeding it to a mathemetical algorithm 
        - so, checksum converts a data into a number 
        - the same data put into the same methematical algorithm always returns the same number/checksum
        - it gurantees data integrity 
    - everytime we make change the checksum value changes
    - git uses SHA-1 hash algorithm 
    - SHA value : -> 
        hash value of the commit 
        40-character hexadecimal string 
    - we can't change the commit message,the commit author, the parent of the commit 
    without changing its SHA value

HEAD POINTER IN GIT :
    - it's a reference variable 
    - it references/points to a certain commit to a repository 
    - as we make changes/commits the ponter moves and points to the new commit 
    - HEAD always points to the tip of the branch in our repository 
    - very useful while dealing with branches 
    - new branches -> to create a new set of code from what we're working on,separate from master branch
    when we make new commit to a new branch the HEAD moves to the new commit 
    - we can move HEAD from master to branch and vice versa 
    - git will track the movement of the HEAD 
    
    Archanas-MacBook-Air:first_git_project archana$ ls -la .git 
    total 40
    drwxr-xr-x  13 archana  staff  416 Apr  5 16:06 .
    drwxr-xr-x   4 archana  staff  128 Apr  5 15:59 ..
    -rw-r--r--   1 archana  staff   15 Apr  5 16:06 COMMIT_EDITMSG
    -rw-r--r--   1 archana  staff   23 Apr  5 14:08 HEAD
    drwxr-xr-x   2 archana  staff   64 Apr  5 14:08 branches
    -rw-r--r--   1 archana  staff  137 Apr  5 14:08 config
    -rw-r--r--   1 archana  staff   73 Apr  5 14:08 description
    drwxr-xr-x  13 archana  staff  416 Apr  5 14:08 hooks
    -rw-r--r--   1 archana  staff  145 Apr  5 16:06 index
    drwxr-xr-x   3 archana  staff   96 Apr  5 14:08 info
    drwxr-xr-x   4 archana  staff  128 Apr  5 16:06 logs
    drwxr-xr-x   7 archana  staff  224 Apr  5 16:06 objects
    drwxr-xr-x   4 archana  staff  128 Apr  5 14:08 refs

    Archanas-MacBook-Air:first_git_project archana$ cat .git/HEAD
    ref: refs/heads/master

    Archanas-MacBook-Air:first_git_project archana$ cat .git/refs/heads/master
    29f6b20b28bb9acbf140c26c6ba68694b5153a9c

    Archanas-MacBook-Air:first_git_project archana$ git log
    commit 29f6b20b28bb9acbf140c26c6ba68694b5153a9c (HEAD -> master)
    Author: Archana Kalburgi <archanakalburgi@gmail.com>
    Date:   Sun Apr 5 16:06:13 2020 +0530

        Initial commit

ADDING FILES TO GIT REPOSITORY :
    git status
    git add <filename>
    git commit <filename>

    to add all the files in the directory:
        git add .
        git commit

VIEW CHANGES :
    - git status 

    Archanas-MacBook-Air:first_git_project archana$ git status
    On branch master
    Changes not staged for commit:
    (use "git add <file>..." to update what will be committed)
    (use "git restore <file>..." to discard changes in working directory)
        modified:   git-hub

    no changes added to commit (use "git add" and/or "git commit -a")

    - "status" command tells us if there are any changes but doesn't tell what the changes was 

    - to know what changes are made we use diff program as below

    Archanas-MacBook-Air:first_git_project archana$ git diff
    diff --git a/git-hub b/git-hub
    index 70c2aba..6747418 100644
    --- a/git-hub
    +++ b/git-hub
    @@ -102,6 +102,8 @@ DISTRIBUTED VERSION CONTROL SYSTEM :
        -git congig --email "archanakablurgi@gmail.com"
        -man git help  
        - to get tab key to complete a word
    +    - to add editor :
    +        git config --global core.editor "vim"
    
    3. initialize a git repository 
        - git init (init -> initialize) 
    @@ -341,4 +343,16 @@ HEAD POINTER IN GIT :
        Author: Archana Kalburgi <archanakalburgi@gmail.com>
        Date:   Sun Apr 5 16:06:13 2020 +0530
    
    -        Initial commit
    \ No newline at end of file
    +        Initial commit
    +
    +ADDING FILES TO GIT REPOSITORY :
    +    git status
    +    git add <filename>
    +    git commit <filename>
    +
    +    to add all the files in the directory:
    +        git add .
    +        git commit
    :

    - once we added the file for the staging index "git diff" doesn't show the changes made to the files 
    in the staging index 
    to see those changes use the following command :

    git diff -- staged 
            or
    git diff --cached

    Archanas-MacBook-Air:first_git_project archana$ git status 
    On branch master
    Changes to be committed:
    (use "git restore --staged <file>..." to unstage)
        modified:   first_file.txt

    Changes not staged for commit:
    (use "git add <file>..." to update what will be committed)
    (use "git restore <file>..." to discard changes in working directory)
        modified:   git-hub

    Archanas-MacBook-Air:first_git_project archana$ git diff --staged 
    diff --git a/first_file.txt b/first_file.txt
    index ce770ca..330e23c 100644
    --- a/first_file.txt
    +++ b/first_file.txt
    @@ -1 +1,2 @@
    -My first file 
    \ No newline at end of file
    +My first file
    +Adding new line to understand tracking 
    \ No newline at end of file

DELETING FILE :

- Deleting untracked file is not a big deal

Archanas-MacBook-Air:first_git_project archana$ git status 
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   first_file.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   git-hub

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_to_delete.txt
	file_to_delete2.txt

Archanas-MacBook-Air:first_git_project archana$ git add .
Archanas-MacBook-Air:first_git_project archana$ git commit -m "add files to delete soon"
[master 7a10ceb] add files to delete soon
 4 files changed, 97 insertions(+), 2 deletions(-)
 create mode 100644 file_to_delete.txt
 create mode 100644 file_to_delete2.txt

two different ways to delete a file :
    1. - move the file to trash in your pc 
       - add the change :   git rm file_to_delete.txt
       - commit the change 
    
    Archanas-MacBook-Air:first_git_project archana$ git rm file_to_delete.txt
    rm 'file_to_delete.txt'
    Archanas-MacBook-Air:first_git_project archana$ git status 
    On branch master
    Changes to be committed:
    (use "git restore --staged <file>..." to unstage)
        deleted:    file_to_delete.txt
    Archanas-MacBook-Air:first_git_project archana$ git commit -m "delete first file"
    [master 142abf9] delete first file
    1 file changed, 0 insertions(+), 0 deletions(-)
    delete mode 100644 file_to_delete.txt
    Archanas-MacBook-Air:first_git_project archana$ git status
    On branch master
    nothing to commit, working tree clean  

    2. - telling git to remove it 
        - this method permanently deletes the file, it's not even in our trash can 
        - a unix command removes it 
        
        Archanas-MacBook-Air:first_git_project archana$ git rm file_to_delete2.txt
        rm 'file_to_delete2.txt'
        Archanas-MacBook-Air:first_git_project archana$ git status 
        On branch master
        Changes to be committed:
        (use "git restore --staged <file>..." to unstage)
            deleted:    file_to_delete2.txt

        Archanas-MacBook-Air:first_git_project archana$ git commit 
        [master ca34597] deletes seconf file by rm command  Please enter the commit message for your changes. Lines starting
        1 file changed, 0 insertions(+), 0 deletions(-)
        delete mode 100644 file_to_delete2.txt
        Archanas-MacBook-Air:first_git_project archana$ git status 
        On branch master
        nothing to commit, working tree clean

        - so this method removes and adds the changes to the git
        - we do not have to delete it manually and then add the changes 
        - ???????? there is copy in the repository ??????

3. MOVING AND RENAMING FILES 
    -  once we rename an existing file the git shows the following 
    Archanas-MacBook-Air:first_git_project archana$ git status
    On branch master
    Changes not staged for commit:
    (use "git add/rm <file>..." to update what will be committed)
    (use "git restore <file>..." to discard changes in working directory)
        deleted:    first_file.txt

    Untracked files:
    (use "git add <file>..." to include in what will be committed)
        primary_file.txt

    no changes added to commit (use "git add" and/or "git commit -a")

    - this means that git sees it as one file was deleted 
    and another file "primary_file" was added 
    instead of simply calling it as renaming 

    - once the changes are added git recognises that the file was renamed 
    
    Archanas-MacBook-Air:first_git_project archana$ git add primary_file.txt
    Archanas-MacBook-Air:first_git_project archana$ git rm first_file.txt
    rm 'first_file.txt'
    Archanas-MacBook-Air:first_git_project archana$ git status
    On branch master
    Changes to be committed:
    (use "git restore --staged <file>..." to unstage)
        renamed:    first_file.txt -> primary_file.txt

    another way of renaming the file is through command line by using the "mv" command

    Archanas-MacBook-Air:first_git_project archana$ git mv fundamental_file.txt primary_file.txt
    Archanas-MacBook-Air:first_git_project archana$ git status 
    On branch master
    Changes to be committed:
    (use "git restore --staged <file>..." to unstage)
        renamed:    fundamental_file.txt -> primary_file.txt

    - it's just one step to rename 
    - we can also move a file from one folder to another thorugh command line using "mv command"

SHORTCUTS :

- git commit -a 
  git commit -all 

  the above commits all the changes made to the files that were tracked by git, we could skip staging 
  that is, <git add> step

HOW TO VIEW A PREVIOUS COMMIT :
    - git diff --color-words
        this will change the color of the text that's been changed
        instead of "+/-" symbols 
        (use f or b to navigate)

    steps :
    1. use git log command to view all the commits made 
        this will list all the commits made with a sha value 
    2. git show 84a92579
        use git show <first 6-8 characters of sha value> command to see that particular change 

    git show 84a92579 --color-words 
    shows the chenages in changed color 

COMPARING THE COMMITS:
    git log
    git diff <old sha's value>..<new commit's sha value> or
    git diff <old sha value>..HEAD 

    --color-words can be used 

- don't add all the changes at once add them seprately with atomic commits so that 
the changes made are clear with messages attached to them 

UNDO CHANGES IN WORKING DIRECTORY :

    Archanas-MacBook-Air:first_git_project archana$ git status 
    On branch master
    Changes not staged for commit:
    (use "git add <file>..." to update what will be committed)
    (use "git restore <file>..." to discard changes in working directory)
        modified:   new_file.txt

    no changes added to commit (use "git add" and/or "git commit -a")
    Archanas-MacBook-Air:first_git_project archana$ git checkout -- new_file.txt

    - so the checkout command resotes the previous version of that file that is the one that was in repository
    - helpful in resoring the previous version and get rid of the new changes 

HOW TO UNSTAGE THE FILES :
    - this is to make the repository match the staging index 

    Archanas-MacBook-Air:first_git_project archana$ git status 
    On branch master
    Changes not staged for commit:
    (use "git add <file>..." to update what will be committed)
    (use "git restore <file>..." to discard changes in working directory)
        modified:   new_file.txt

    no changes added to commit (use "git add" and/or "git commit -a")
    
    
    Archanas-MacBook-Air:first_git_project archana$ git add .
    
    
    Archanas-MacBook-Air:first_git_project archana$ git status 
    On branch master
    Changes to be committed:
    (use "git restore --staged <file>..." to unstage)
        modified:   new_file.txt

    
    
    Archanas-MacBook-Air:first_git_project archana$ git reset HEAD new_file.txt
    Unstaged changes after reset:
    M	new_file.txt
    
    
    Archanas-MacBook-Air:first_git_project archana$ git status 
    On branch master
    Changes not staged for commit:
    (use "git add <file>..." to update what will be committed)
    (use "git restore <file>..." to discard changes in working directory)
        modified:   new_file.txt

    no changes added to commit (use "git add" and/or "git commit -a")

    Command used:
        git reset HEAD new_file.txt

AMMENDING CHANGES THAT ARE ALREADY THEIR IN THE REPOSITORY :
    - amend option that you use with commit says take whatever was in the old commit, 
    bring it back down to staging, 
    add whatever staging has into it, and then 
    let's recommit that. 
    I'm going to amend it with those new changes.

    -  It's taking what's in the LAST commit, 
    bringing it down, 
    adding your new stuff to it, and 
    recommitting it, and 
    generating a new SHA in the process.

    you make changes 
    add them 
    while commiting use amend command as 
        git commit --amend -m "<msg>"
    again use amend to change the message of the comit 
        git commit --amend -m "<msg>"

    - it can only cange the last commit msg 
    - git allows you amending only hte most resent commit 

RETRIVING THE OLDER VERSION : 
    - if we want to undo some changes that we've made, we have to make those edits into new commits
    - 


"added a new line 